# Docker Compose configuration for AWS production deployment
# Uses external AWS RDS PostgreSQL and ElastiCache Valkey
# This assumes you have already created AWS infrastructure using the setup scripts

services:
  # Django Backend (uses external AWS RDS and ElastiCache)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: watchparty-backend:latest
    env_file:
      - ./backend/.env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ~/.aws:/home/appuser/.aws:ro
    ports:
      - "8000:8000"
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Celery Worker (uses external AWS ElastiCache for broker)
  celery-worker:
    image: watchparty-backend:latest
    command: celery -A config worker --loglevel=info --concurrency=2
    env_file:
      - ./backend/.env
    volumes:
      - media_volume:/app/media
      - ~/.aws:/home/appuser/.aws:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - watchparty-network
    restart: unless-stopped

  # Celery Beat (scheduler, uses external AWS ElastiCache)
  celery-beat:
    image: watchparty-backend:latest
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./backend/.env
    volumes:
      - ~/.aws:/home/appuser/.aws:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - watchparty-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
        NODE_OPTIONS: "--max-old-space-size=2048"
      target: runner
    image: watchparty-frontend:latest
    env_file:
      - ./frontend/.env.local
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  static_volume:
  media_volume:

networks:
  watchparty-network:
    driver: bridge