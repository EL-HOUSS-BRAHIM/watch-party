services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: watchparty-postgres
    environment:
      POSTGRES_DB: watchparty
      POSTGRES_USER: watchparty
      POSTGRES_PASSWORD: watchparty123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U watchparty -d watchparty"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Valkey Cache (Redis-compatible)
  valkey:
    image: valkey/valkey:7.2-alpine
    container_name: watchparty-valkey
    command: valkey-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - valkey_data:/data
    ports:
      - "6379:6379"
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.development
      DATABASE_URL: postgresql://watchparty:watchparty123@db:5432/watchparty
      DB_NAME: watchparty
      DB_USER: watchparty
      DB_PASSWORD: watchparty123
      DB_HOST: db
      DB_PORT: "5432"
      REDIS_URL: redis://valkey:6379/0
      REDIS_USE_SSL: "false"
      CELERY_BROKER_URL: redis://valkey:6379/2
      CELERY_RESULT_BACKEND: redis://valkey:6379/3
      CHANNEL_LAYERS_CONFIG_HOSTS: redis://valkey:6379/4
      USE_S3: "false"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      valkey:
        condition: service_healthy
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config worker --loglevel=info --concurrency=2
    env_file:
      - ./backend/.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.development
      DATABASE_URL: postgresql://watchparty:watchparty123@db:5432/watchparty
      DB_NAME: watchparty
      DB_USER: watchparty
      DB_PASSWORD: watchparty123
      DB_HOST: db
      DB_PORT: "5432"
      REDIS_URL: redis://valkey:6379/0
      REDIS_USE_SSL: "false"
      CELERY_BROKER_URL: redis://valkey:6379/2
      CELERY_RESULT_BACKEND: redis://valkey:6379/3
      CHANNEL_LAYERS_CONFIG_HOSTS: redis://valkey:6379/4
      USE_S3: "false"
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    depends_on:
      - backend
      - db
      - valkey
    networks:
      - watchparty-network
    restart: unless-stopped

  # Celery Beat (scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./backend/.env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings.development
      DATABASE_URL: postgresql://watchparty:watchparty123@db:5432/watchparty
      DB_NAME: watchparty
      DB_USER: watchparty
      DB_PASSWORD: watchparty123
      DB_HOST: db
      DB_PORT: "5432"
      REDIS_URL: redis://valkey:6379/0
      REDIS_USE_SSL: "false"
      CELERY_BROKER_URL: redis://valkey:6379/2
      CELERY_RESULT_BACKEND: redis://valkey:6379/3
      CHANNEL_LAYERS_CONFIG_HOSTS: redis://valkey:6379/4
      USE_S3: "false"
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - db
      - valkey
    networks:
      - watchparty-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env.local
    environment:
      BACKEND_URL: http://backend:8000
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_FRONTEND_API: http://localhost:8000/api
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws
      NEXT_PUBLIC_ENABLE_GOOGLE_DRIVE: "true"
      NEXT_PUBLIC_ENABLE_DISCORD: "true"
      NEXT_PUBLIC_ENABLE_ANALYTICS: "false"
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - watchparty-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  static_volume:
  media_volume:
  postgres_data:
  valkey_data:

networks:
  watchparty-network:
    driver: bridge
