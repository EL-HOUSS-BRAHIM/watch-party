name: Deploy to Lightsail

on:
  push:
    branches: ["master", "main"]
    # Pushes use cache by default for fast builds
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: '🔄 Force rebuild without cache (slower, ensures clean build)'
        required: false
        type: boolean
        default: false
      remove_old_images:
        description: '🗑️ Remove old images before building (frees space, forces fresh build)'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Increased from 15 to 45 for Docker builds
    steps:
      - uses: actions/checkout@v4

      - name: Display Build Configuration
        run: |
          echo "🚀 Deployment Configuration"
          echo "======================================"
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "Trigger: Push (automatic)"
            echo "Build Mode: 🚄 Fast build with cache"
            echo "Remove Old Images: ❌ No"
          else
            echo "Trigger: Manual workflow dispatch"
            if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
              echo "Build Mode: 🔄 Force rebuild WITHOUT cache"
            else
              echo "Build Mode: 🚄 Fast build with cache"
            fi
            if [ "${{ github.event.inputs.remove_old_images }}" = "true" ]; then
              echo "Remove Old Images: ✅ Yes (clean build)"
            else
              echo "Remove Old Images: ❌ No"
            fi
          fi
          echo "======================================"

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 40  # Increased from 14 to 40
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SSL_ORIGIN: ${{ secrets.SSL_ORIGIN }}
          SSL_PRIVATE: ${{ secrets.SSL_PRIVATE }}
          # On push: use cache (both set to 0). On manual trigger: use input values
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild == 'true' && '1' || '0' }}
          REMOVE_OLD_IMAGES: ${{ github.event.inputs.remove_old_images == 'true' && '1' || '0' }}
          TARGET_BRANCH: ${{ github.ref_name || 'main' }}
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: deploy
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          command_timeout: 40m
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,SSL_ORIGIN,SSL_PRIVATE,FORCE_REBUILD,REMOVE_OLD_IMAGES,TARGET_BRANCH
          script: |
            set -e

            # Quick repository setup
            APP_NAME=watch-party
            APP_DIR=/srv/$APP_NAME
            TARGET_BRANCH=${TARGET_BRANCH:-main}
            REPO_URL="https://github.com/EL-HOUSS-BRAHIM/watch-party.git"

            if ! git ls-remote --exit-code --heads "$REPO_URL" "$TARGET_BRANCH" >/dev/null 2>&1; then
              for candidate in main master; do
                if git ls-remote --exit-code --heads "$REPO_URL" "$candidate" >/dev/null 2>&1; then
                  TARGET_BRANCH="$candidate"
                  break
                fi
              done
            fi
            if [ -z "$TARGET_BRANCH" ]; then
              TARGET_BRANCH=main
            fi

            # Clone or update repository
            if [ ! -d "$APP_DIR" ]; then
              if ! git clone --branch "$TARGET_BRANCH" --single-branch "$REPO_URL" "$APP_DIR"; then
                git clone "$REPO_URL" "$APP_DIR"
                cd "$APP_DIR"
                TARGET_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}') || TARGET_BRANCH=main
                if [ -z "$TARGET_BRANCH" ]; then
                  TARGET_BRANCH=main
                fi
                git checkout "$TARGET_BRANCH"
              fi
            else
              cd $APP_DIR
              git fetch origin
              if ! git rev-parse --verify "origin/$TARGET_BRANCH" >/dev/null 2>&1; then
                TARGET_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}') || TARGET_BRANCH=main
                if [ -z "$TARGET_BRANCH" ]; then
                  TARGET_BRANCH=main
                fi
              fi
              git checkout "$TARGET_BRANCH"
              git reset --hard "origin/$TARGET_BRANCH"
            fi

            # Check directory permissions and use home directory if needed
            if [ "$(stat -c '%U' $APP_DIR 2>/dev/null)" != "deploy" ]; then
              if ! sudo chown -R deploy:deploy $APP_DIR 2>/dev/null; then
                APP_DIR="$HOME/watch-party"
                if [ ! -d "$APP_DIR" ]; then
                  git clone --branch "$TARGET_BRANCH" --single-branch "$REPO_URL" "$APP_DIR"
                else
                  cd $APP_DIR
                  git fetch origin
                  if ! git rev-parse --verify "origin/$TARGET_BRANCH" >/dev/null 2>&1; then
                    TARGET_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}') || TARGET_BRANCH=main
                    if [ -z "$TARGET_BRANCH" ]; then
                      TARGET_BRANCH=main
                    fi
                  fi
                  git checkout "$TARGET_BRANCH"
                  git reset --hard "origin/$TARGET_BRANCH"
                fi
              fi
            fi

            cd $APP_DIR

            export DEPLOY_BRANCH="$TARGET_BRANCH"

            # Run modular deployment script
            export APP_DIR
            export AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY
            export SSL_ORIGIN
            export SSL_PRIVATE
            export FORCE_REBUILD
            export REMOVE_OLD_IMAGES
            
            bash scripts/deployment/deploy-main.sh
