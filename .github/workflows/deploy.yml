name: Deploy to Lightsail

on:
  push:
    branches: [ "master", "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: deploy
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            set -e
            APP_NAME=watch-party
            APP_DIR=/srv/$APP_NAME
            
            # Clone or update repo
            if [ ! -d "$APP_DIR" ]; then
              git clone https://github.com/EL-HOUSS-BRAHIM/watch-party.git $APP_DIR
              cd $APP_DIR
            else
              cd $APP_DIR
              git fetch origin
              git reset --hard origin/master
            fi
            
            # Setup environment files if they don't exist
            if [ ! -f "$APP_DIR/backend/.env" ]; then
              cp backend/.env.example backend/.env
              echo "‚ö†Ô∏è  Created backend/.env from example"
              echo "‚ö†Ô∏è  IMPORTANT: Update backend/.env with your AWS credentials:"
              echo "   - Database password for RDS PostgreSQL"
              echo "   - Redis auth token for ElastiCache"
              echo "   - Other service credentials (email, OAuth, etc.)"
            fi
            
            if [ ! -f "$APP_DIR/frontend/.env.local" ]; then
              cp frontend/.env.example frontend/.env.local
              echo "‚úÖ Created frontend/.env.local with correct API URLs"
            fi
            
            # Configure AWS CLI (required for AWS external services)
            if ! command -v aws &> /dev/null; then
              echo "üì¶ Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi
            
            # Configure AWS region (uses IAM role attached to server)
            mkdir -p ~/.aws
            cat > ~/.aws/config << EOF
            [default]
            region = eu-west-3
            output = json
            EOF
            
            # Test AWS connectivity
            echo "üîç Testing AWS connectivity..."
            if ! aws sts get-caller-identity > /dev/null 2>&1; then
              echo "‚ùå AWS configuration failed. Ensure IAM role MyAppRole is attached to this server."
              exit 1
            fi
            echo "‚úÖ AWS connectivity confirmed"
            
            # Build and deploy with Docker Compose (uses external AWS services)
            echo "üèóÔ∏è  Building Docker images..."
            docker-compose build --no-cache
            
            echo "üöÄ Starting services..."
            docker-compose up -d --remove-orphans
            
            # Wait for backend to be ready (increased time for AWS connections)
            echo "‚è≥ Waiting for services to be ready..."
            sleep 45
            
            # Test backend health
            for i in {1..12}; do
              if curl -f http://localhost:8000/health/ > /dev/null 2>&1; then
                echo "‚úÖ Backend is healthy"
                break
              elif [ $i -eq 12 ]; then
                echo "‚ùå Backend health check failed after 2 minutes"
                docker-compose logs backend
                exit 1
              else
                echo "‚è≥ Waiting for backend... ($i/12)"
                sleep 10
              fi
            done
            
            # Run initial setup if this is first deployment
            if docker-compose exec -T backend python manage.py showmigrations --plan | grep -q "\[ \]"; then
              echo "üîß Running initial Django setup..."
              if ! docker-compose exec -T backend python manage.py migrate; then
                echo "‚ùå Migration failed. Check database connectivity:"
                echo "   - Verify RDS PostgreSQL is accessible"
                echo "   - Check database credentials in backend/.env"
                docker-compose logs backend
                exit 1
              fi
              docker-compose exec -T backend python manage.py collectstatic --noinput
            fi
            
            # Final health check
            echo "üè• Final health check..."
            if curl -f http://localhost:8000/health/ > /dev/null 2>&1; then
              echo "üéâ Deployment successful!"
              echo "   Frontend: http://${{ secrets.LIGHTSAIL_HOST }}/"
              echo "   Backend API: http://${{ secrets.LIGHTSAIL_HOST }}/api/"
            else
              echo "‚ùå Final health check failed"
              docker-compose logs --tail=20 backend
              exit 1
            fi
            
            # Cleanup
            docker system prune -f
