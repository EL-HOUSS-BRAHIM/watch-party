name: Deploy to Lightsail
# DISABLED: Workflow temporarily disabled
# Remove this comment and the following condition to re-enable
on:
  push:
    branches: ["master", "main"]
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        type: boolean
        default: false

jobs:
  deploy:
    if: false
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        timeout-minutes: 14
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SSL_ORIGIN: ${{ secrets.SSL_ORIGIN }}
          SSL_PRIVATE: ${{ secrets.SSL_PRIVATE }}
          FORCE_REBUILD: ${{ github.event.inputs.force_rebuild == 'true' && '1' || '0' }}
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: deploy
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,SSL_ORIGIN,SSL_PRIVATE,FORCE_REBUILD
          script: |
            set -e
            
            # Quick repository setup
            APP_NAME=watch-party
            APP_DIR=/srv/$APP_NAME
            
            # Clone or update repository
            if [ ! -d "$APP_DIR" ]; then
              git clone https://github.com/EL-HOUSS-BRAHIM/watch-party.git $APP_DIR
            else
              cd $APP_DIR
              git fetch origin
              git reset --hard origin/master
            fi
            
            # Check directory permissions and use home directory if needed
            if [ "$(stat -c '%U' $APP_DIR 2>/dev/null)" != "deploy" ]; then
              if ! sudo chown -R deploy:deploy $APP_DIR 2>/dev/null; then
                APP_DIR="$HOME/watch-party"
                if [ ! -d "$APP_DIR" ]; then
                  git clone https://github.com/EL-HOUSS-BRAHIM/watch-party.git $APP_DIR
                else
                  cd $APP_DIR
                  git fetch origin
                  git reset --hard origin/master
                fi
              fi
            fi
            
            cd $APP_DIR
            
            # Run modular deployment script
            export APP_DIR
            export AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY
            export SSL_ORIGIN
            export SSL_PRIVATE
            export FORCE_REBUILD
            
            bash scripts/deployment/deploy-main.sh
